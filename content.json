{"pages":[{"title":"Tags","date":"2020-08-15T07:59:32.859Z","path":"tags/index.html","text":""},{"title":"About","date":"2020-08-15T07:59:32.852Z","path":"about/index.html","text":""},{"title":"Categories","date":"2020-08-15T07:59:32.855Z","path":"categories/index.html","text":""}],"posts":[{"title":"","date":"2020-08-15T09:01:58.206Z","path":"网络/重放攻击/","text":"背景今天想从【今日热榜】这个 App 中获取榜单的 Get 请求，从而可以“借”它们的数据做个榜单类的小程序。用 Charles 抓手机的包之后，发现可以抓取到一个 Get 请求，回包的内容也正确被抓取了，可是当我复制这段 Get 请求的 url 到浏览器的时候，发现没有对应的回包了 奇怪，为什么会这样呢，决定开始研究下 分析url 是类似以下结构 1http://api.tophub.today/nodes/128?nonce=xxx&amp;sign=yyy&amp;timestamp=123 主要有 3 个字段：nonce、sign 和 timestamp 基于这几个关键词去搜索，发现原来我这种行为属于【重放攻击】 什么是重放攻击假如我们要通过 Get 请求传递用户的用户名和密码，明文传输的例子如下 1http://api.tophub.today/nodes/128?id=hello&amp;password=1234 这是裸奔，我们没这么蠢，于是对 password 进行 MD5 加密之后再传输，如下 1http://api.tophub.today/nodes/128?id=hello&amp;sign=md5(password) 其中 sign 的常用加密算法为 MD5，MD5 算法是一种不可逆算法，也就是说你加密之后就不能解密了 服务器的验证方法就是根据 id 从数据库查出用户的密码，再对其进行 MD5 加密，得到的结果与 sign 的值进行对比，如果相同则请求合法，反之则 sign 被篡改过 黑客通过抓包获取到该链接，他无法破解加密信息得到用户密码；但是他只要模拟此次的正常请求，就可以伪装成客户端同服务器通信。这样至少可以做两件事，第一件是跟我一样，可以随时随地模拟客户端取服务器的数据；第二件事是可以疯狂发送该请求致使服务器繁忙 如何防止重放攻击时间戳首先我们假设一次 HTTP 请求从发出到到达服务器的时间是不会超过 60s 的，而黑客获取链接到篡改链接再发送到服务的时间会超过 60s（不要问为什么是 60s，继续往下看） 当你发送一个请求时必须携带一个当前的时间戳 timestamp。假设值为 10 为了防止黑客修改时间戳，需要将 timestamp 也进行 MD5，放到 sign 中，如下 1?id=hello&amp;sign=md5(password+timestamp)&amp;timestamp=10 当请求到达服务器之后，服务器会获取当前时间，假设为 t2 = 80，很明显 t2 - timestamp &gt; 60s，那么服务器就认为请求不合法。因为这个请求从客户端到服务器的时间竟然超过 60s。如果在 60s 内，再进行一次 md5 校验，检查 timestamp 有没有被篡改（一旦 timestamp 被篡改过，算出来的 md5 值一定与 sign 不同） 问题来了，如果黑客在 60s 内发起请求，这种方法就失效了 随机数我们加入一个随机数 nonce，每次成功请求，服务器会保存当前成功请求的随机数 nonce 到缓存或数据库中，当请求再次进到服务器，判断携带的随机数 nonce 是否在缓存或者数据库中已经存在，如果存在，则认为请求非法 url 如下 1?id=hello&amp;sign=md5(password+nonce)&amp;nonce=31415 同理，为了防止 nonce 被篡改，需要将 nonce 进行 MD5 加密到 sign 随机数的出现保证了请求的唯一性，但是存储 nonce 的集合会越来越大，为了防止 nonce 集合无限大，需要定期清理该集合，但是一旦该集合被清理，我们就无法验证被清理了的 nonce 参数了。比如，假设该集合平均1天清理一次的话，我们抓取到的该 url，虽然当时无法进行重放攻击，但是我们还是可以每隔一天进行一次重放攻击的。而且存储24小时内，所有请求的 nonce 参数，也是一笔不小的开销 当然随机数还得确保唯一性 时间戳+随机数时间戳屏蔽了 60s 后的请求，而 60s 内重复的请求可以用随机数来过滤 url 如下 1?id=hello&amp;sign=md5(password+timestamp+nonce)&amp;timestamp=10&amp;nonce=31415 配合时间戳，服务器只要每次有新的请求进来的时候，确保此次请求没有被篡改的前提下，如果新请求带来的 timestamp 比最后一次更新 nonce 集合的时间晚 60秒，那么就可以清除 nonce 缓存了 12345678910111213141516171819202122232425262728// 判断 time 参数是否有效if ($curTime - $time &gt; 60)&#123; die(\"请求超时\");&#125;// 判断 nonce 参数是否在集合已存在if (in_array($nonce, $nonceArray))&#123; die(\"请求仅一次有效\");&#125;// 验证数字签名 if ($sign != md5($password.$time.$nonce))&#123; die(\"数字签名验证失败\");&#125;// 判断是否需要清理nonce集合if ($curTime - $nonceArray-&gt;lastModifyTime &gt; 60)&#123; $nonceArray = null;&#125;// 记录本次请求的 nonce 参数$nonceArray.push($nonce);//开始处理合法的请求 参考 Web安全防范—–防止重放攻击 基于timestamp和nonce的防止重放攻击方案","tags":[],"categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/网络/"}]},{"title":"","date":"2020-08-15T09:01:58.203Z","path":"网络/计算机网络基础/","text":"OSI 七层模型、TCP/IP 五层模型、与 TCP/IP 四层模型 数据传递时，每层都会在上一层的报文添加自己的头部 应用层HTTP、FTP、SMTP、DNS 传输层TCP、UDP 网络层IP、ICMP（Internet 控制报文协议） ping 使用的是 ICMP 协议 链路层ARP、RARP ARP：IP 地址 -&gt; MAC 地址RARP：MAC 地址 -&gt; IP 地址 问：ARP 属于哪一层TCP/IP 模型中，它所有定义的协议是在网络层上的 按照 OSI 的标准，数据在传递时每层会加上自己的信息。当网络层的 IP 包进入链路层时，链路层通过 ARP 协议添加链路信息，因此属于链路层 在 OSI 七层模型中 ARP 协议属于链路层；而在 TCP/IP 模型中，ARP 协议属于网络层 问：当在浏览器中输入 www.baidu.com 的时候发生了什么一、DNS 域名解析先查本地 hosts 文件，如果没命中则主机会向 DNS 服务器发送一条 DNS 查询报文以查询该域名对应的 IP 注意，该报文是 UDP 报文，不需要与 DNS 服务器建立 TCP 连接；我们这台主机本来就知道 DNS 服务器的 IP 地址，要么是写好的静态 IP，要么是路由器动态分配的 IP，不是域名，所以 DNS 查询这个过程也不需要去解析域名 二、建立 TCP 连接传输层拿到了应用层解析到的 IP 地址，开始与服务器进行三次握手，建立 TCP 连接 三、发送 HTTP 请求建立连接后，应用层开始向服务器发送请求，服务器返回相应的结果 四、关闭 TCP 连接为了避免服务器与客户端双方的资源占用和损耗，当双方没有请求或响应传递时，任意一方都可以发起关闭请求。与创建 TCP 连接的 3 次握手类似，关闭 TCP 连接，需要 4 次握手。 五、浏览器解析 HTML、JS、CSS、JsonDom 数、CSS 规则集、Render 树","tags":[],"categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/网络/"}]},{"title":"","date":"2020-08-15T09:01:58.199Z","path":"网络/TCP 四次挥手/","text":"四次挥手的过程 TCP 三次握手，一定是客户端先发起连接；而 TCP 四次挥手，发起中断连接的既可以是客户端，也可以是服务器。 本文以客户端先发起请求为例，刚开始双方都处于 ESTABLISHED 状态。 从报文的角度上看，四次挥手的过程如下： 第一次挥手：客户端发送一个 FIN 报文（FIN=1，seq=u），进入 FIN_WAIT1 状态，等待服务端的确认，并停止发送数据 第二次挥手：服务端回复 ACK 报文（ACK=1，ack=u+1，seq=v），表明已经收到客户端的报文了，进入 CLOSE_WAIT 状态 客户端收到服务端的确认后，进入 FIN_WAIT2 状态，等待服务端的 FIN 报文。 第三次挥手：如果服务端数据发送完毕想断开连接了，发送 FIN 报文（FIN=1，ACK=1，seq=w，ack=u+1）。进入 LAST_ACK 的状态，等待客户端的确认。 第四次挥手：客户端回复 ACK 报文（ACK=1，seq=u+1，ack=w+1），进入 TIME_WAIT 状态，等待 2MSL 后进入 CLOSED 状态；服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状 从发送和接受数据的能力上看，四次挥手的过程如下： 第一次挥手：客户端不再发送数据；服务器知道客户端不再发送数据 第二次挥手：服务器对客户端 FIN 的确认，依然可能继续发送数据；客户端收到后会继续接收数据 第三次挥手：服务器数据发送完毕后发起第三次挥手，表示服务器不再发送数据；客户端收到后会等 2MSL 后关闭连接，不再接收数据 第四次挥手：服务器收到后关闭连接 什么是 MSL，为什么需要等 2MSLMSL（Maximum Segment Lifetime），即报文段最大生存时间。可以简单理解为，报文段在网络内存在的最长时间，如果超过这个时间，报文段就会被丢弃。 根据第三版《UNIX 网络编程 卷 1》2.7 节，TIME_WAIT 状态的主要目的有两个： 优雅的关闭 TCP 连接，也就是尽量保证被动关闭的一端收到它自己发出去的 FIN 报文的 ACK 确认报文； 处理延迟的重复报文，这主要是为了避免前后两个使用相同四元组的连接中的前一个连接的报文干扰后一个连接。 注：很多博文只讨论了第一点，并且轻易的给出了错误的理由：最坏情况，ACK 报文的发送和 FIN 报文的重传各自需要 1MSL，因此是 2MSL。仔细想想之后，这些人的文章简直就是不经脑子的生搬硬套 假设 A 是主动关闭的一方，B 是被动关闭。 假如现在 A 收到 FIN 之后，为了实现目标 1，即保证 B 能够收到自己的 ACK 报文。那么 A 完美的等待时间不是 2MSL，而应该是从 B 发送第一个 FIN 报文开始计时到它最后一次重传 FIN 报文这段时长加上 MSL。但这个计算方式过于保守，只有在所有的 ACK 报文都丢失的情况下才需要这么长的时间；另外，第一个目标虽然重要，但并不十分关键，因为既然已经到了关闭连接的最后一步，说明在这个 TCP 连接上的所有用户数据已经完成可靠传输，所以要不要完美的关闭这个连接其实已经不是那么关键了。因此，（我猜）RFC 标准的制定者才决定以网络丢包不太严重为前提条件，然后根据第二个目标来计算 TIME_WAIT 状态应该持续的时长。 等待 2MSL 的真正目的是为了避免前后两个使用相同四元组的连接中的前一个连接的报文干扰后一个连接，换句话说，就是为了让此次 TCP 连接中的所有报文在网络中消失。 假如现在 A 发送 ACK 后，最坏情况下，这个 ACK 在 1MSL 时到达 B；此时 B 在收到这个 ACK 的前一刹那，一直在重传 FIN，这个 FIN 最坏会在 1MSL 时间内消失。因此从 A 发送 ACK 的那一刹那开始，等待 2MSL 可以保证 A 发送的最后一个 ACK，和 B 发送的最后一个 FIN 都在网络中消失 注：B 超时重传的时间并不是 2MSL；2MSL 时间为 240 秒，这是协议标准，一般超时重传只有 0.5 秒、1 秒、2 秒、4 秒……小于 MSL 为什么需要四次挥手类比 TCP 的三次握手，这个问题可以理解为为什么服务器的 ACK 报文和 FIN 报文不能合并在一起发送？ 原因是第一次挥手仅仅代表着客户端不再发送数据，而服务器收到 ACK 之后，可能还有数据想要发送给客户端，所以等待服务器发送完毕数据之后，才会继续发送 FIN 报文，因此无法合并发送 参考资料 面试官，不要再问我三次握手和四次挥手 为什么 tcp 的 TIME_WAIT 状态要维持 2MSL","tags":[],"categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/网络/"}]},{"title":"","date":"2020-08-15T09:01:58.196Z","path":"网络/TCP 与 UDP/","text":"对比 UDP TCP 是否连接 无连接 面向连接（三次握手） 是否可靠 不可靠传输，不使用流量控制和拥塞控制 可靠传输，有序列号，确认号，超时重传等，使用流量控制和拥塞控制 连接对象个数 支持一对一，一对多，多对一和多对多通信 只能是一对一 传输方式 面向报文 面向字节流 首部开销 首部开销小，仅 8 字节 首部最小 20 字节，最大 60 字节 适用场景 适用于实时应用（微信语音、视频聊天） 适用于要求可靠传输的应用，例如文件传输 总结UDP 无连接，不可靠，传输快","tags":[],"categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/网络/"}]},{"title":"","date":"2020-08-15T09:01:58.191Z","path":"网络/TCP 三次握手/","text":"三次握手的过程 刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。 第一次握手：客户端发送 SYN=1，seq=x（SYN=1 的报文段不能携带数据，但要消耗掉一个序号），此时客户端处于 SYN_SENT 状态 第二次握手：服务器回复 SYN=1，ACK=1，ack=x+1，seq=y，此时服务器处于 SYN_RCVD 的状态 第三次握手：客户端回复 ACK=1，ack=y+1，seq=x+1，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。 ACK 报文段可以携带数据，不携带数据则不消耗序号 注意：不要混淆 ACK 标志位和 ack 确认序列号，ACK 标记位为 1 表示这是包一个确认包，而 ack 确认序列号是 Acknowledgement Number，是对对方初始序列号的回复（ack = x+1），对方以此确认该报文是对其 SYN 报文的回复。ack 确认序列号只有在 ACK 标记位为 1 时才有效 为什么是三次握手TCP 的可靠连接是靠 seq（sequence numbers 序列号）来达成的。 TCP 设计中一个基本设定就是，通过 TCP 连接发送的每一个包，都有一个 sequence number。而因为每个包都是有序列号的，所以都能被确认收到这些包。 确认机制是累计的，所以一个对 sequence number X 的确认，意味着 X 序列号之前 (不包括 X) 包都是被确认接收到的。 所以这样就有一个问题：这条连接突然断开重连后，TCP 怎么样识别之前旧链接重发的包？这就需要独一无二的 ISN（初始序列号）机制。 那么 TCP 连接握手，握的是啥？ 三次握手是为了双方确定彼此的初始序列号 注意：seq = x，这个 x 就是初始序列号 如果是四次握手： 1.1 A 发送同步信号 SYN + A 的初始序列号（Initial sequence number，简称 ISN） 1.2 B 收到后回包，并记录 A 的初始序列号到本地 1.3 B 发送同步信号 SYN + B 的初始序列号 1.4 A 收到后回包，并记录 B 的初始序列号到本地 这样，A 和 B 就互相确认了彼此的初始序列号。但很显然 1.2 和 1.3 这两个步骤可以合并，只需要三次握手 如果是两次握手 2.1 A 发送同步信号 SYN + A 的初始序列号 2.2 B 收到后，发送同步信号 SYN + B 的初始序列号 这种情况，A 的初始序列号双方都知道；但是 B 的初始序列号，B 无法确定 A 是否知道 中途丢包的情况 第一个包，即 A 发给 B 的 SYN 中途被丢，没有到达 B A 会周期性超时重传，直到收到 B 的确认 第二个包，即 B 发给 A 的 SYN+ACK 中途被丢，没有到达 A B 会周期性超时重传，直到收到 A 的确认 第三个包，即 A 发给 B 的 ACK 中途被丢，没有到达 B A 发完 ACK，单方面认为 TCP 为 Established 状态，而 B 显然认为 TCP 为 Active 状态 这种情况下 A 会超时重传这个 ACK 吗？不会！TCP 不会为没有数据的 ACK 超时重传 a. 假定此时双方都没有数据发送，B 会周期性超时重传，直到收到 A 的确认，收到之后 B 的 TCP 连接也为 Established 状态，双向可以发包 b. 假定此时 A 有数据发送，B 收到 A 的 Data + ACK，自然会切换为 established 状态，并接受 A 的 Data c. 假定 B 有数据发送，数据发送不了，会一直周期性超时重传 SYN + ACK，直到收到 A 的确认才可以发送数据 三次握手过程中可以携带数据吗？其实第三次握手的时候，是可以携带数据的。但是，第一次、第二次握手不可以携带数据 为什么这样呢？大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据。因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。 也就是说，第一次握手不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。 对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病 SYN 攻击是什么？服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到 SYN 洪泛攻击。 SYN 攻击就是 Client 在短时间内伪造大量不存在的 IP 地址，并向 Server 不断地发送 SYN 包，Server 则回复确认包，并等待 Client 确认，由于源地址不存在，因此 Server 需要不断重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，导致正常的 SYN 请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。 检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。在 Linux/Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击。 参考资料 TCP 为什么是三次握手，而不是两次或四次？ TCP 为什么是四次挥手，而不是三次？ 面试官，不要再问我三次握手和四次挥手","tags":[],"categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/网络/"}]},{"title":"","date":"2020-08-15T09:01:58.188Z","path":"网络/HTTPS/","text":"假如客户端要登录，将用户名和密码传到服务器 如果使用 HTTP，会有什么问题HTTP 是明文传输，有以下问题 窃听风险：第三方可以获知通信内容（需要加密） 篡改风险：第三方可以修改通信内容（需要校验） 冒充风险：第三方可以冒充他人身份参与通信（需要信任——证书） 那我可以在客户端先加密，这样就不是明文传输了呀你这种属于对称加密，如果你的密钥是在通信过程中传输，那可能被截获，这样你的信息就泄漏了 那服务器和客户端事先约定好密钥，而不是在通信时才传输，这样就不会泄漏了可以的，但是实际上这样做会很麻烦 那你有什么更好的方法吗使用非对称加密，服务器维护公钥和密钥，通信时，客户端先向服务器端索要公钥，然后用公钥加密信息再传输，服务器收到密文后，用自己的私钥解密 这里的公钥和私钥是什么公开秘钥：简称公钥；私人秘钥：简称私钥 非对称加密的特点就是： 私钥加密后的密文，所有公钥都可以解密（比如数字证书的生成） 公钥加密后的密文，只有私钥可以解密（比如服务器和客户端的加密流程） 私钥只有一个人有，而公钥可以发给所有的人 那看起来很完美了呀 其实这样还有一个安全问题 非对称加密还存在什么安全问题如果第三方拦截住了客户端的公钥请求，然后模仿了服务器的行为，传输给你他自己的公钥 同时，第三方也模拟了客户端向服务器发送公钥请求，得到了服务器的公钥 接着客户端就会把攻击者当做服务器，用假公钥把信息加密传给第三方，第三方再使用自己的私钥解密得到信息 同时，第三方得到了信息之后，模拟客户端使用服务器的公钥进行加密，再传给服务器 这个就是所谓的“中间人攻击”，通过这样的手段，便可以获取客户端和服务器之间通信的所有内容。 那有什么方法防止中间人攻击吗有，使用CA（数字证书认证机构）颁发的数字证书 证书就是服务器将信息（公钥、姓名、邮件等）提供给 CA，CA 把信息写到证书里，再用自己的私钥对这些信息进行加密形成证书的签名，再返回给服务器 简单理解：证书 = CA 私钥对服务器公钥的加密结果 现在服务器不再返回公钥给客户端，而是返回证书 客户端收到证书之后，只需要用 CA 的公钥解密证书的签名得到加密之前的散列值，再计算数字证书中信息（公钥、姓名、邮件等）的散列值，将两者进行对比，只要散列值一致，就证明这张证书没有被篡改过 这个中间人攻击看起来很像 Charles/WireShark 的抓包没错，抓包软件的原理就是中间人攻击，怪不得每次得信任证书是，只要客户端信任了 Charles 的证书，客户端就会把 Charles 当成服务器，Charles 变成了中间人，因此可以监听 HTTPS 的内容 那客户端怎么得到正确的 CA 的公钥呢简单点说，操作系统和浏览器在设备出厂的时候就会内置很多根证书 非对称加密计算量太大，如何减少耗用的时间？客户端得到正确的公钥之后，就可以使用对称加密来传播信息 客户端生成一个“会话密钥”，使用服务器的公钥对该密钥进行加密，将密钥密文传递给服务器。 服务器使用自己的密钥对密钥密文进行解密得到客户端密钥 接下来双方利用会话密钥，来实现对称加密的通信 每一次对话，客户端和服务器端都生成一个”会话密钥”（session key），用它来加密信息。由于”会话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密”会话密钥”本身，这样就减少了加密运算的消耗时间 HTTPS 整个工作流程HTTPS 主要分为两个过程： 握手阶段：客户端向服务器端索要公钥；并协商 “会话密钥” 通信阶段：双方采用 “会话密钥” 进行加密通信 其中握手阶段的流程图如下： 我们看看整个流程： 客户端生成一个随机数 RNc（即 Random Number of Client）并发送给服务器【Client-Hello 阶段】 服务器收到后生成 RNs（即 Random Number Of Server），并把 RNs 和证书（含公钥）返回给客户端【Server-Hello 阶段】 客户端校验证书提取公钥并验证；生成 PMS（即 Pre Master Secret），使用公钥加密发送给服务器 服务器使用私钥进行解密得到 PMS 客户端和服务器都使用 RNc、RNs 和 PMS 生成会话密钥，接下来使用会话密钥对通信内容进行对称加密 为什么要使用三个随机数 不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于 SSL 协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。对于 RSA 密钥交换算法来说，pre-master-secret 本身就是一个随机数，再加上 hello 消息中的两个随机数，三个随机数通过一个密钥导出器最终导出一个对称密钥。pre-master-secret 的存在在于 SSL 协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么 pre-master-secret 就有可能被猜出来，那么仅适用 pre-master-secret 作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上 pre-master-secret 三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了 关于安全信任 双方通信内容的安全性是靠公钥加密、私钥解密来保证的，这一安全性由非对称加密的特性，即由公钥加密的信息只能使用对应的私钥才能解开来保证。由于私钥不会传递，只有拥有者知道，所以安全性就由公钥的正确性来保证 公钥由对方在通信初始所提供，但是这时很容易被中间人替换掉，为了保证公钥的正确性，所以在发送公钥的时候也会提供对应的数字证书，用于验证这个公钥是对方的而不是中间人的。那么安全性就是由数字证书的正确性来保证了 数字证书是由上级 CA 签发给个人 / 组织的，上级 CA 用自己的私钥给个人证书进行签名，保证证书中的公钥不被篡改，而接受者需要用上级 CA 证书中的公钥来解密个人数字证书中的数字签名来验证证书中的公钥是否是正确的。那么安全性就是由上级 CA 证书的正确性保证的了 但是，上级 CA 证书也是由其上级 CA 签发的，这种信任关系一直到根证书。根证书没有上级 CA 为其签名，而是自签名的，也就是说，它自身为自身签名，保证正确性。所以根证书就是这个信任链最重要的部分。如果根证书泄露的话，其签名的所有证书及使用其签名的证书所签名的证书的安全性将不复存在。现在，安全性就是靠系统根证书的私钥不被泄露或者其公钥不被篡改来保证的了 根证书不应该通过网络分发，因为通过网络分发的话，可能会被中间人攻击。一般根证书都通过操作系统或者浏览器分发，在操作系统中会内置很多根证书，但是最初的操作系统也不能通过网络分发，因为中间人可以修改操作系统中的根证书。所以要保证安全只能靠最原始的方法，当面交流。硬件厂商会和证书签发机构合作，在电脑、手机等设备出厂的时候在其操作系统中内置签发机构的根证书，再将这些设备分发出去，这样，这些设备的用户就可以安全地进行信息交换了。所以，安全性就依赖于这些设备在分发到消费者手中之前不会被恶意修改来保证了 关于完整性校验HTTPS 通过证书解决了冒充风险，通过加密解决了窃听风险，那么篡改风险如何规避呢？ 当握手阶段结束后，双方进入数据通信阶段。在这个阶段： 发送方会使用协商出来的“会话密钥”对原始消息进行加密，形成密文；同时也会使用哈希算法对原始消息进行计算，形成消息摘要；并将消息摘要和密文同时发送出去 接收方会使用“会话密钥”对密文进行解密，得到原始消息，然后对原始消息使用同样的哈希算法进行计算，将得到的值与消息摘要比较，以此判断是否被篡改过 哈希算法是不可逆的，可以把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射。无论多长的消息都被映射成长度固定的散列值，因此消息长短不会影响完整性校验的性能 More 对称加密：客户端用密钥将对信息进行加密，服务器用同一把密钥将对信息进行解密 发送方和接收方如何共享相同的密钥比较麻烦。一种方法是通过事先协商好而不是通过通信进行协商，避免被监听和截获；另一种是通过非对称加密通道进行对称加密的密钥的传输 对称加密的密钥是一对一的，若服务器要跟多个客户端通信则需要维护多对密钥 非对称加密：公钥和私钥；客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密 不存在密钥分发的问题，解码方可以自己生成密钥对，一个做私钥存起来，另外一个作为公钥进行发布 解决了密钥管理的复杂度问题，多个加密方都可以使用一个已知的公钥进行加密，但只有拥有私钥的一方才能解密 缺点是比对称加密慢 常见算法 常见的对称加密算法：DES、AES、RC2、RC4 常见的非对称加密算法：RSA、DSA 常见的完整性校验算法：MD5、SHA1、SHA256 参考来源 SSL/TLS协议运行机制的概述 一文完全理解HTTPS 完全图解 HTTPS","tags":[],"categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/网络/"}]},{"title":"工具书签","date":"2020-08-15T09:01:57.754Z","path":"index/","text":"iPhone 尺寸 iPhone 设备一览 C++ 整型大小","tags":[],"categories":[]}]}